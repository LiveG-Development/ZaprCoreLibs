{"dom.element": {"shortDescription": "Get DOM object by selector or overrides and return properties associated with it.", "params": [{"description": "DOM selector to use. Default: `\"window\"`.", "type": "string", "name": "selector"}, {"description": "List of overrides to use instead of selector. Selector must be `\"\"` for this parameter to register.", "type": "object", "name": "overrides"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values.", "type": "object"}}, "dom.element( ... ).attribute": {"shortDescription": "Do actions on the attributes of matching elements.", "params": [{"description": "Name of attribute to use.", "type": "string", "name": "name"}], "longDescription": "", "return": {"description": "Dictionary of available functions.", "type": "object"}}, "dom.element( ... ).children": {"shortDescription": "Get children of first found matching element.", "params": [{"description": "Child to get. Default: `dom.RANGE_ALL`.", "type": "number", "name": "selection"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values.", "type": "object"}}, "dom.element( ... ).parent": {"shortDescription": "Get parent of first found matching element.", "params": [], "longDescription": "", "return": {"description": "Dictionary of available functions and values.", "type": "object"}}, "dom.element( ... ).html.set": {"shortDescription": "Set the HTML content of all matching elements.", "params": [{"description": "HTML content to set.", "type": "string", "name": "content"}], "longDescription": "", "return": {}}, "dom.element( ... ).attribute( ... ).get": {"shortDescription": "Get the text content of the first found matching element's attribute.", "params": [], "longDescription": "", "return": {"description": "content of the first found matching element's attribute.", "type": "Text"}}, "dom.element( ... ).text.get": {"shortDescription": "Get the text content of the first found matching element.", "params": [], "longDescription": "", "return": {"description": "Text content of the first found matching element.", "type": "string"}}, "dom.element( ... ).html.get": {"shortDescription": "Get the HTML content of the first found matching element.", "params": [], "longDescription": "", "return": {"description": "HTML content of the first found matching element.", "type": "string"}}, "dom.element( ... ).attribute( ... ).delete": {"shortDescription": "Delete attribute of all matching elements.", "params": [], "longDescription": "", "return": {}}, "dom.element( ... ).pick": {"shortDescription": "Pick individual element from all matching elements.", "params": [{"description": "Element to get. Default: `0`.", "type": "number", "name": "selection"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values.", "type": "object"}}, "dom.element( ... ).attribute( ... ).set": {"shortDescription": "Set attribute content of all matching elements.", "params": [{"description": "Text content to set.", "type": "string", "name": "content"}], "longDescription": "", "return": {}}, "dom.element( ... ).events.listen": {"shortDescription": "Listen to the given future event for all matching elements, and call function when the event is raised.", "params": [{"description": "Name of event to listen for.", "type": "string", "name": "event"}, {"description": "Callback to call when the event is raised.", "type": "function", "name": "callback"}, {"description": "Use event capturing instead of event bubbling. Default is `false`.", "type": "boolean", "name": "useCapture"}], "longDescription": "Event bubbling is where the event handling is passed from the first child all the way to the root element. Event capturing is going the other way.", "return": {}}, "dom.element( ... ).text.set": {"shortDescription": "Set the text content of all matching elements.", "params": [{"description": "Text content to set.", "type": "string", "name": "content"}], "longDescription": "", "return": {}}, "dom.element( ... ).attribute( ... ).exists": {"shortDescription": "Check if attribute of first matching element exists.", "params": [], "longDescription": "", "return": {"description": "True if attribute of first matching element exists.", "type": "boolean"}}, "dom.element( ... ).events.ignore": {"shortDescription": "Ignore the callback given to the future event for all matching elements.", "params": [{"description": "Name of event to use.", "type": "string", "name": "event"}, {"description": "Callback to ignore when the event is raised.", "type": "function", "name": "usedCallback"}], "longDescription": "", "return": {}}}