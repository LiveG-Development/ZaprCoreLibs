{"dom.element( ... ).text.set": {"longDescription": "", "shortDescription": "Set the text content of all matching elements.", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}, "params": [{"name": "content", "type": "string", "description": "Text content to set."}]}, "dom.element( ... ).parent": {"longDescription": "", "shortDescription": "Get parent of first found matching element.", "return": {"description": "Dictionary of available functions and values.", "type": "object"}, "params": []}, "dom.new": {"longDescription": "", "shortDescription": "Create new DOM object by element name without attaching it to DOM.", "return": {"description": "Dictionary of available functions and values.", "type": "object"}, "params": [{"name": "name", "type": "string", "description": "Name of element to specify."}]}, "dom.element( ... ).attribute( ... ).set": {"longDescription": "", "shortDescription": "Set attribute content of all matching elements.", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}, "params": [{"name": "content", "type": "string", "description": "Text content to set."}]}, "dom.element( ... ).text.get": {"longDescription": "", "shortDescription": "Get the text content of the first found matching element.", "return": {"description": "Text content of the first found matching element.", "type": "string"}, "params": []}, "dom.element( ... ).attribute( ... ).delete": {"longDescription": "", "shortDescription": "Delete attribute of all matching elements.", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}, "params": []}, "dom.element( ... ).attribute": {"longDescription": "", "shortDescription": "Do actions on the attributes of matching elements.", "return": {"description": "Dictionary of available functions.", "type": "object"}, "params": [{"name": "name", "type": "string", "description": "Name of attribute to use."}]}, "dom.element( ... ).events.listen": {"longDescription": "Event bubbling is where the event handling is passed from the first child all the way to the root element. Event capturing is going the other way.", "shortDescription": "Listen to the given future event for all matching elements, and call function when the event is raised.", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}, "params": [{"name": "event", "type": "string", "description": "Name of event to listen for."}, {"name": "callback", "type": "function", "description": "Callback to call when the event is raised."}, {"name": "useCapture", "type": "boolean", "description": "Use event capturing instead of event bubbling. Default is `false`."}]}, "dom.element( ... ).attribute( ... ).exists": {"longDescription": "", "shortDescription": "Check if attribute of first matching element exists.", "return": {"description": "True if attribute of first matching element exists.", "type": "boolean"}, "params": []}, "dom.element( ... ).html.set": {"longDescription": "", "shortDescription": "Set the HTML content of all matching elements.", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}, "params": [{"name": "content", "type": "string", "description": "HTML content to set."}]}, "dom.element( ... ).children": {"longDescription": "", "shortDescription": "Get children of first found matching element.", "return": {"description": "Dictionary of available functions and values.", "type": "object"}, "params": [{"name": "selection", "type": "number", "description": "Child to get. Default: `dom.RANGE_ALL`."}]}, "dom.element( ... ).newChild": {"longDescription": "", "shortDescription": "Add child element to all matching elements.", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}, "params": [{"name": "element", "type": "object", "description": "Child element to add to all matching elements."}]}, "dom.element( ... ).events.ignore": {"longDescription": "", "shortDescription": "Ignore the callback given to the future event for all matching elements.", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}, "params": [{"name": "event", "type": "string", "description": "Name of event to use."}, {"name": "usedCallback", "type": "function", "description": "Callback to ignore when the event is raised."}]}, "dom.element": {"longDescription": "", "shortDescription": "Get DOM object by selector or overrides and return properties associated with it.", "return": {"description": "Dictionary of available functions and values.", "type": "object"}, "params": [{"name": "selector", "type": "string", "description": "DOM selector to use. Default: `\"body\"`."}, {"name": "overrides", "type": "object", "description": "List of overrides to use instead of selector. Selector must be `\"\"` for this parameter to register."}]}, "dom.loaded": {"longDescription": "", "shortDescription": "Call callback function when DOM has loaded.", "return": {}, "params": [{"name": "callback", "type": "function", "description": "Callback function to call when DOM has loaded."}]}, "dom.element( ... ).childCount": {"longDescription": "", "shortDescription": "Get number of child elements of first found matching element.", "return": {"description": "Number of child elements of first found matching element.", "type": "number"}, "params": []}, "dom.element( ... ).pick": {"longDescription": "", "shortDescription": "Pick individual element from all matching elements.", "return": {"description": "Dictionary of available functions and values.", "type": "object"}, "params": [{"name": "selection", "type": "number", "description": "Element to get. Default: `0`."}]}, "dom.element( ... ).attribute( ... ).get": {"longDescription": "", "shortDescription": "Get the text content of the first found matching element's attribute.", "return": {"description": "content of the first found matching element's attribute.", "type": "Text"}, "params": []}, "dom.element( ... ).html.get": {"longDescription": "", "shortDescription": "Get the HTML content of the first found matching element.", "return": {"description": "HTML content of the first found matching element.", "type": "string"}, "params": []}}