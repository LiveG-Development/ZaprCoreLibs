{"dom.element": {"shortDescription": "Get DOM object by selector or overrides and return properties associated with it.", "params": [{"name": "selector", "description": "DOM selector to use. Default: `\"body\"`.", "type": "string"}, {"name": "overrides", "description": "List of overrides to use instead of selector. Selector must be `\"\"` for this parameter to register.", "type": "object"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values.", "type": "object"}}, "dom.element( ... ).attribute": {"shortDescription": "Do actions on the attributes of matching elements.", "params": [{"name": "name", "description": "Name of attribute to use.", "type": "string"}], "longDescription": "", "return": {"description": "Dictionary of available functions.", "type": "object"}}, "dom.element( ... ).children": {"shortDescription": "Get children of first found matching element.", "params": [{"name": "selection", "description": "Child to get. Default: `dom.RANGE_ALL`.", "type": "number"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values.", "type": "object"}}, "dom.element( ... ).parent": {"shortDescription": "Get parent of first found matching element.", "params": [], "longDescription": "", "return": {"description": "Dictionary of available functions and values.", "type": "object"}}, "dom.element( ... ).html.set": {"shortDescription": "Set the HTML content of all matching elements.", "params": [{"name": "content", "description": "HTML content to set.", "type": "string"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}}, "dom.loaded": {"shortDescription": "Call callback function when DOM has loaded.", "params": [{"name": "callback", "description": "Callback function to call when DOM has loaded.", "type": "function"}], "longDescription": "", "return": {}}, "dom.element( ... ).style.get": {"shortDescription": "Get styling property from first mathing element.", "params": [{"name": "property", "description": "Name of styling property to get from first matching element.", "type": "string"}], "longDescription": "", "return": {"description": "Value of styling property taken from first matching element.", "type": "any"}}, "dom.element( ... ).events.ignore": {"shortDescription": "Ignore the callback given to the future event for all matching elements.", "params": [{"name": "event", "description": "Name of event to use.", "type": "string"}, {"name": "usedCallback", "description": "Callback to ignore when the event is raised.", "type": "function"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}}, "dom.element( ... ).html.get": {"shortDescription": "Get the HTML content of the first found matching element.", "params": [], "longDescription": "", "return": {"description": "HTML content of the first found matching element.", "type": "string"}}, "dom.new": {"shortDescription": "Create new DOM object by element name without attaching it to DOM.", "params": [{"name": "name", "description": "Name of element to specify.", "type": "string"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values.", "type": "object"}}, "dom.element( ... ).attribute( ... ).set": {"shortDescription": "Set attribute content of all matching elements.", "params": [{"name": "content", "description": "Text content to set.", "type": "string"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}}, "dom.element( ... ).attribute( ... ).exists": {"shortDescription": "Check if attribute of first matching element exists.", "params": [], "longDescription": "", "return": {"description": "True if attribute of first matching element exists.", "type": "boolean"}}, "dom.element( ... ).childCount": {"shortDescription": "Get number of child elements of first found matching element.", "params": [], "longDescription": "", "return": {"description": "Number of child elements of first found matching element.", "type": "number"}}, "dom.element( ... ).style.setPush": {"shortDescription": "Push styling properties from dictionary to all matching elements.", "params": [{"name": "dict", "description": "Dictionary of styling properties to push to all matching elements.", "type": "object"}], "longDescription": "The matching elements will have the styling properties appended, or overwritten if the styling property already exists.", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}}, "dom.element( ... ).style.set": {"shortDescription": "Set styling property value for all matching elements.", "params": [{"name": "property", "description": "Name of styling property to set for all matching elements.", "type": "string"}, {"name": "value", "description": "Value of styling property to set for all matching elements.", "type": "any"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}}, "dom.element( ... ).text.set": {"shortDescription": "Set the text content of all matching elements.", "params": [{"name": "content", "description": "Text content to set.", "type": "string"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}}, "dom.element( ... ).pick": {"shortDescription": "Pick individual element from all matching elements.", "params": [{"name": "selection", "description": "Element to get. Default: `0`.", "type": "number"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values.", "type": "object"}}, "dom.element( ... ).attribute( ... ).delete": {"shortDescription": "Delete attribute of all matching elements.", "params": [], "longDescription": "", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}}, "dom.element( ... ).style.getAll": {"shortDescription": "Get all styling properties from first matching element.", "params": [], "longDescription": "", "return": {"description": "Dictionary of all styling properties taken from first matching element.", "type": "object"}}, "dom.element( ... ).attribute( ... ).get": {"shortDescription": "Get the text content of the first found matching element's attribute.", "params": [], "longDescription": "", "return": {"description": "content of the first found matching element's attribute.", "type": "Text"}}, "dom.element( ... ).style.delete": {"shortDescription": "Delete styling property for all matching elements.", "params": [{"name": "property", "description": "Name of styling property to delete for all matching elements.", "type": "string"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}}, "dom.element( ... ).newChild": {"shortDescription": "Add child element to all matching elements.", "params": [{"name": "element", "description": "Child element to add to all matching elements.", "type": "object"}], "longDescription": "", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}}, "dom.element( ... ).text.get": {"shortDescription": "Get the text content of the first found matching element.", "params": [], "longDescription": "", "return": {"description": "Text content of the first found matching element.", "type": "string"}}, "dom.element( ... ).events.listen": {"shortDescription": "Listen to the given future event for all matching elements, and call function when the event is raised.", "params": [{"name": "event", "description": "Name of event to listen for.", "type": "string"}, {"name": "callback", "description": "Callback to call when the event is raised.", "type": "function"}, {"name": "useCapture", "description": "Use event capturing instead of event bubbling. Default is `false`.", "type": "boolean"}], "longDescription": "Event bubbling is where the event handling is passed from the first child all the way to the root element. Event capturing is going the other way.", "return": {"description": "Dictionary of available functions and values for original element.", "type": "object"}}}